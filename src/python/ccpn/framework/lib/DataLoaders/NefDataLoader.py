"""
This module defines the data loading mechanism for loading a NEF file
"""

#=========================================================================================
# Licence, Reference and Credits
#=========================================================================================
__copyright__ = "Copyright (C) CCPN project (https://www.ccpn.ac.uk) 2014 - 2022"
__credits__ = ("Ed Brooksbank, Joanna Fox, Victoria A Higman, Luca Mureddu, Eliza Płoskoń",
               "Timothy J Ragan, Brian O Smith, Gary S Thompson & Geerten W Vuister")
__licence__ = ("CCPN licence. See http://www.ccpn.ac.uk/v3-software/downloads/license",
               )
__reference__ = ("Skinner, S.P., Fogh, R.H., Boucher, W., Ragan, T.J., Mureddu, L.G., & Vuister, G.W.",
                 "CcpNmr AnalysisAssign: a flexible platform for integrated NMR analysis",
                 "J.Biomol.Nmr (2016), 66, 111-124, http://doi.org/10.1007/s10858-016-0060-y"
                )
#=========================================================================================
# Last code modification
#=========================================================================================
__modifiedBy__ = "$modifiedBy: Geerten Vuister $"
__dateModified__ = "$dateModified: 2022-02-11 11:45:57 +0000 (Fri, February 11, 2022) $"
__version__ = "$Revision: 3.1.0 $"
#=========================================================================================
# Created
#=========================================================================================
__author__ = "$Author: geertenv $"
__date__ = "$Date: 2021-06-30 10:28:41 +0000 (Fri, June 30, 2021) $"
#=========================================================================================
# Start of code
#=========================================================================================

from typing import Sequence
from time import time

from ccpn.framework.Application import getApplication
from ccpn.framework.lib.DataLoaders.DataLoaderABC import DataLoaderABC

from ccpn.util.Logging import getLogger
from ccpn.util.nef.GenericStarParser import DataBlock
from ccpn.util.nef import StarIo

from ccpn.core.lib.ContextManagers import undoStackBlocking, notificationBlanking
from ccpn.framework.lib.ccpnNef import CcpnNefIo
from ccpn.framework.lib.ccpnNef.CcpnNefImporter import CcpnNefImporter, NEF_STANDARD


class NefDataLoader(DataLoaderABC):
    """NEF data loader
    """
    dataFormat = 'nefFile'
    suffixes = ['.nef']  # a list of suffixes that get matched to path
    canCreateNewProject = True
    alwaysCreateNewProject = False

    def __init__(self, path):
        super(NefDataLoader, self).__init__(path)
        self._nefImporter = CcpnNefImporter(errorLogging=NEF_STANDARD) # A CcpnNefImporter instance
        self._dataBlock = None  # A NmrDataBlock, as read by the _nefImporter
        self._nefReader = None  # A CcpnNefReader instance; generated by the ImportNefPopup widget

    @property
    def nefImporter(self) -> CcpnNefImporter:
        """:return the CcnNefImporter instance
        """
        return self._nefImporter

    @property
    def dataBlock(self) -> StarIo.NmrDataBlock:
        """:return the NmrDataBlock corresponding to the contents of self.path;
        read if not defined and then retains for later usage
        """
        if self._dataBlock is None:
            self._nefImporter.loadFile(self.path)
            self._dataBlock = self._nefImporter.data
        return self._dataBlock

    def load(self) -> list:
        """The actual Nef loading method;
        :return a list of [project]
        """
        _dataBlock = self.dataBlock  # This assures that the data have been read
        project = self.application._loadNefFile(dataLoader=self)
        return [project]

    def _importIntoProject(self, project):
        """Import the dataBlock, i.e. the data of self into project, using a previously attached
        reader (auto-generated if None).
        :param project: a Project instance

        CCPNINTERNAL: used in Framework._loadNefFile
        """
        if self._nefReader is None:
            _reader = CcpnNefIo.CcpnNefReader(application=project.application)
        else:
            _reader = self._nefReader

        # self._nefImporter._attachReader(_reader) # GWV: pretty sure don't need this as we
        # call the _reader method to import
        _reader.importExistingProject(project, self.dataBlock)

NefDataLoader._registerFormat()
