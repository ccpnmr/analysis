"""
This module defines base classes for Series Analysis
"""
#=========================================================================================
# Licence, Reference and Credits
#=========================================================================================
__copyright__ = "Copyright (C) CCPN project (https://www.ccpn.ac.uk) 2014 - 2022"
__credits__ = ("Ed Brooksbank, Joanna Fox, Victoria A Higman, Luca Mureddu, Eliza Płoskoń",
               "Timothy J Ragan, Brian O Smith, Gary S Thompson & Geerten W Vuister")
__licence__ = ("CCPN licence. See https://ccpn.ac.uk/software/licensing/")
__reference__ = ("Skinner, S.P., Fogh, R.H., Boucher, W., Ragan, T.J., Mureddu, L.G., & Vuister, G.W.",
                 "CcpNmr AnalysisAssign: a flexible platform for integrated NMR analysis",
                 "J.Biomol.Nmr (2016), 66, 111-124, http://doi.org/10.1007/s10858-016-0060-y")
#=========================================================================================
# Last code modification
#=========================================================================================
__modifiedBy__ = "$modifiedBy: Luca Mureddu $"
__dateModified__ = "$dateModified: 2022-06-23 16:37:36 +0100 (Thu, June 23, 2022) $"
__version__ = "$Revision: 3.1.0 $"
#=========================================================================================
# Created
#=========================================================================================
__author__ = "$Author: Luca Mureddu $"
__date__ = "$Date: 2022-02-02 14:08:56 +0000 (Wed, February 02, 2022) $"
#=========================================================================================
# Start of code
#=========================================================================================

from ccpn.util.Logging import getLogger
from ccpn.framework.lib.experimentAnalysis.SeriesAnalysisABC import SeriesAnalysisABC
import ccpn.framework.lib.experimentAnalysis.SeriesAnalysisVariables as sv
from ccpn.framework.lib.experimentAnalysis.CSMFittingModels import _registerChemicalShiftMappingModels

class ChemicalShiftMappingAnalysisBC(SeriesAnalysisABC):
    """
    Chemical Shift Mapping Analysis Non-Gui module.
    # needed settings:
    """
    seriesAnalysisName = sv.ChemicalShiftMappingAnalysis
    _AlphaFactors = sv.DEFAULT_ALPHA_FACTORS

    def __init__(self):
        super().__init__()

        _registerChemicalShiftMappingModels()

    @staticmethod
    def newDataTableFromSpectrumGroup(spectrumGroup, seriesTableType=sv.CSM_INPUT_FRAME,
                                      thePeakProperty=sv._PPMPOSITION,
                                      dataTableName=sv.CSM_INPUT_FRAME, **kwargs):
        """
        :param spectrumGroup: object of type SpectrumGroup
        :param seriesTableType: str, One of sv.INPUT_SERIESFRAME_TYPES e.g.: sv.CSM_INPUT_FRAME
        :param dataTableName: str, name for a newData table object. Autogenerated if none
        :param kwargs: any key:value for creating the new DataTable object.
        :return:
        """
        from ccpn.framework.lib.experimentAnalysis.SeriesTablesBC import INPUT_CSM_SERIESFRAMES_DICT
        project = spectrumGroup.project
        seriesFrameCLS = INPUT_CSM_SERIESFRAMES_DICT.get(seriesTableType,)
        if not seriesFrameCLS:
            raise RuntimeError(f'Cannot find SeriesFrame for {seriesTableType}.')
        seriesFrame = seriesFrameCLS()
        seriesFrame.buildFromSpectrumGroup(spectrumGroup=spectrumGroup, thePeakProperty=thePeakProperty)
        dataTable = project.newDataTable(name=dataTableName, data=seriesFrame)
        return dataTable

    def getAlphaFactor(self, atomName):
        """Get the Alpha Factor for the DeltaDeltas calculation """
        return self._AlphaFactors.get(atomName, None)

    def setAlphaFactor(self, **kwargs):
        """Set the Alpha Factor for the DeltaDeltas calculation.
            E.g.: setAlphaFactor(H=1, N=0.14) or setAlphaFactor(**{'H':1, 'N':0.14}). Factors are values between 0.1-1
        """
        dd = kwargs.copy()
        for k,v in kwargs.items():
            if v > 1:
                getLogger().warning(f'ChemicalShiftMapping. Setting an unusual AlphaFactor value:{v} for the Atom:{k}.')
            if v == 0:
                getLogger().warning(f'ChemicalShiftMapping. Cannot set the AlphaFactor value:{v} for the Atom:{k}.')
                dd.pop(k)
        self._AlphaFactors.update(dd)

    def calculateDeltaDeltaShifts(self, inputData, **kwargs):
        """
        Calculate the DeltaDeltas Chemical shift distances for an input SeriesTable.
        :param inputData: CSMInputFrame
        :param args:
        :param kwargs:
                    FilteringAtoms   = ['H','N'],
                    AlphaFactors     = [1, 0.142],
                    ExcludedResidues = ['PRO'] # The string type as it appears in the NmrResidue type. These residues
                    will be removed from the table.
                    - Use default values if kwargs not given -
        :return: outputFrame
        """
        from ccpn.framework.lib.experimentAnalysis.CSMFittingModels import DeltaDeltaShiftsCalculation
        ddc = DeltaDeltaShiftsCalculation()
        frame = ddc.calculateDeltaDeltaShift(inputData, **kwargs)
        return frame

    def fitInputData(self, *args, **kwargs):
        """
        Perform the registered FittingModels to the inputDataTables and add the outputs to a newDataTable or
         override last available.
        :param args:
        :param kwargs:
            :key: outputName:       outputDataTable name
            :key: fittingModels:    list of fittingModel classes (not initialised).So to use only the specif given,
                                    rather than all available.
            :key: overrideOutputDataTables: bool, True to rewrite the output result in the last available dataTable.
                                    When multiple fittingModels are available, each will output in a different dataTable
                                    according to its definitions.
        :return: None
        """
        if not self.inputDataTables:
            raise RuntimeError('CSM. Cannot run any fitting models. Add a valid inputData first')

        fittingModels = self.fittingModels or kwargs.get(sv.FITTING_MODELS, [])
        ovverideOutputDataTable = kwargs.get(sv.OVERRIDE_OUTPUT_DATATABLE, True)
        outputDataTableName = kwargs.get(sv.OUTPUT_DATATABLE_NAME, None)
        for model in fittingModels:
            fittingModel = model()
            inputDataTable = self.inputDataTables[-1]
            outputFrame = fittingModel.fitSeries(inputDataTable.data)
            if not outputDataTableName:
                outputDataTableName = f'{inputDataTable.name}_output_{fittingModel.ModelName}'.replace(" ", "")
            outputDataTable = self._fetchOutputDataTable(name=outputDataTableName, seriesFrameType=sv.CSM_OUTPUT_FRAME,
                                                   overrideExisting=ovverideOutputDataTable)
            outputDataTable.data = outputFrame
            self.addOutputData(outputDataTable)

    def plotResults(self, *args, **kwargs):
        getLogger().warning('Not implemented yet. Available: plotDeltaDeltas')

    def plotDeltaDeltas(self, deltaDeltaShiftsFrame,
                        yColumnName=sv.DELTA_DELTA_SUM,
                        unitLabels = 'minimal',
                        unitLabelRotation=45,
                        majorTick=5,
                        minorTicks=1,
                        orientation='v',
                        *args, **kwargs):
        """
        Plot a bargraph of the deltaDeltas
        :param deltaDeltaShiftsFrame:
        :param yColumnName:
        :param unitLabels:
                        - minimal: only RESIDUE_CODE
                        - full: RESIDUE_TYPE + RESIDUE_CODE
        :param unitLabelRotation: degree of the text rotation
        :param unitLabelsInterval:
                        - None: default show all labels as in the original data
                        - int: e.g.: 5 show a scale at 5 numbers gaps. [0,5,10,15,20...]
        :param orientation : v or h
        :param args:
        :param kwargs:
        :return:
        """
        from ccpn.ui.gui.widgets.PlotterWidget import plotter
        from matplotlib.ticker import (MultipleLocator, AutoMinorLocator)
        with plotter() as plt:
            resCodes = deltaDeltaShiftsFrame[sv.RESIDUE_CODE]
            resTypes = deltaDeltaShiftsFrame[sv.RESIDUE_TYPE]
            if yColumnName not in deltaDeltaShiftsFrame.columns:
                getLogger().warning(f'Given ColumnName not present in data. Used default {sv.DELTA_DELTA_SUM}')
                yColumnName = sv.DELTA_DELTA_SUM
            y = deltaDeltaShiftsFrame[yColumnName]
            labels = resCodes
            if unitLabels == 'full':
                labels = ['-'.join(x) for x in zip(resCodes, resTypes)]
            ax = plt.currentPlot
            ax.xaxis.set_major_locator(MultipleLocator(majorTick))
            ax.xaxis.set_major_formatter('{x:.0f}')
            ax.xaxis.set_minor_locator(MultipleLocator(minorTicks))
            plt.plotBar(values=resCodes, heights=y, unitLabels=labels, orientation=orientation)
            # plt.currentPlot.set_xticklabels(labels, rotation=unitLabelRotation)
