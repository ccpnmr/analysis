"""
This module defines base classes for Series Analysis
"""
#=========================================================================================
# Licence, Reference and Credits
#=========================================================================================
__copyright__ = "Copyright (C) CCPN project (https://www.ccpn.ac.uk) 2014 - 2022"
__credits__ = ("Ed Brooksbank, Joanna Fox, Victoria A Higman, Luca Mureddu, Eliza Płoskoń",
               "Timothy J Ragan, Brian O Smith, Gary S Thompson & Geerten W Vuister")
__licence__ = ("CCPN licence. See https://ccpn.ac.uk/software/licensing/")
__reference__ = ("Skinner, S.P., Fogh, R.H., Boucher, W., Ragan, T.J., Mureddu, L.G., & Vuister, G.W.",
                 "CcpNmr AnalysisAssign: a flexible platform for integrated NMR analysis",
                 "J.Biomol.Nmr (2016), 66, 111-124, http://doi.org/10.1007/s10858-016-0060-y")
#=========================================================================================
# Last code modification
#=========================================================================================
__modifiedBy__ = "$modifiedBy: Luca Mureddu $"
__dateModified__ = "$dateModified: 2022-02-16 11:02:55 +0000 (Wed, February 16, 2022) $"
__version__ = "$Revision: 3.1.0 $"
#=========================================================================================
# Created
#=========================================================================================
__author__ = "$Author: Luca Mureddu $"
__date__ = "$Date: 2022-02-02 14:08:56 +0000 (Wed, February 02, 2022) $"
#=========================================================================================
# Start of code
#=========================================================================================

from collections import OrderedDict
from ccpn.util.Logging import getLogger
from ccpn.core.SpectrumGroup import SpectrumGroup
from ccpn.framework.lib.experimentAnalysis.SeriesAnalysisABC import SeriesAnalysisABC
import ccpn.framework.lib.experimentAnalysis.SeriesAnalysisVariables as sv
from ccpn.framework.lib.experimentAnalysis.CSMFittingModels import _registerChemicalShiftMappingModels

class ChemicalShiftMappingAnalysisBC(SeriesAnalysisABC):
    """
    Chemical Shift Mapping Analysis Non-Gui module.
    # needed settings:
    """
    seriesAnalysisName = sv.ChemicalShiftMappingAnalysis
    _AlphaFactors = sv.DEFAULT_ALPHA_FACTORS

    def __init__(self, application):
        super().__init__(application)

        # Register the available Fitting Models
        _registerChemicalShiftMappingModels()

    @staticmethod
    def newDataTableFromSpectrumGroup(spectrumGroup, seriesTableType=sv.CSM_INPUT_FRAME,
                                      thePeakProperty=sv._PPMPOSITION,
                                      dataTableName=sv.CSM_INPUT_FRAME, **kwargs):
        """
        :param spectrumGroup: object of type SpectrumGroup
        :param seriesTableType: str, One of sv.INPUT_SERIESFRAME_TYPES e.g.: sv.CSM_INPUT_FRAME
        :param dataTableName: str, name for a newData table object. Autogenerated if none
        :param kwargs: any key:value for creating the new DataTable object.
        :return:
        """
        from ccpn.framework.lib.experimentAnalysis.SeriesTablesBC import CSMInputFrame
        project = spectrumGroup.project
        # TODO create series table by Type arg
        seriesFrame = CSMInputFrame()
        seriesFrame.buildFromSpectrumGroup(spectrumGroup, thePeakProperty=thePeakProperty)
        dataTable = project.newDataTable(name=dataTableName, data=seriesFrame)
        return dataTable


    def getAlphaFactor(self, atomName):
        """Get the Alpha Factor for the DeltaDeltas calculation """
        return self._AlphaFactors.get(atomName, None)

    def setAlphaFactor(self, **kwargs):
        """Set the Alpha Factor for the DeltaDeltas calculation.
            E.g.: setAlphaFactor(H=1, N=0.14) or setAlphaFactor(**{'H':1, 'N':0.14})
            Factors are values between 0.1-1
        """
        dd = kwargs.copy()
        for k,v in kwargs.items():
            if v > 1:
                getLogger().warning(f'ChemicalShiftMapping. Setting an unusual AlphaFactor value:{v} for the Atom:{k}.')
            if v == 0:
                getLogger().warning(f'ChemicalShiftMapping. Cannot set the AlphaFactor value:{v} for the Atom:{k}.')
                dd.pop(k)
        self._AlphaFactors.update(dd)


    def fit(self, *args, **kwargs):

        if not self.inputDataTables:
            raise RuntimeError('CSM. Cannot run any fitting models. Add a valid inputData first')

        fittingModels = self.fittingModels or kwargs.get(sv.FITTING_MODELS, [])
        ov = kwargs.get(sv.OVERRIDE_OUTPUT_DATATABLE, True)
        for model in fittingModels:
            fittingModel = model()
            inputDataTable = self.inputDataTables[-1]
            outputFrame = fittingModel.fit(inputDataTable.data)
            outputName = f'{inputDataTable.name}_output_{fittingModel.ModelName}'
            dataTable = self._fetchOutputDataTable(name=outputName, seriesFrameType=sv.CSM_OUTPUT_FRAME, overrideExisting=ov)
            dataTable.data = outputFrame
            self.addOutputData(dataTable)






















